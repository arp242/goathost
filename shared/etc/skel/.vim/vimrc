set encoding=utf-8
scriptencoding utf-8


" PreProc        xxx term=underline ctermfg=5 guifg=#6a0dad

set nocompatible                       " Ensure it works with 'vim -u'
syntax on                              " Switch syntax highlighting on.
filetype plugin indent on              " Enable filetype detection.
set termguicolors                      " Use true colors.
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum" " Set correct escape codes to make termguicolors word in st.
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

silent! colorscheme default2           " Load my color scheme if it exists.
if get(g:, 'colors_name', '') isnot# 'default2'
    colorscheme default                " Fall back to default (some Linuxes overwrite this in global vimrc).
endif

set background=light                   " Make sure correct value is used.
set backspace=indent,eol,start         " Allow backspacing over everything.
set history=500                        " Keep 500 lines of command line history.
set incsearch                          " Jump to match while typing the pattern in /.
set hlsearch                           " Highlight the last used search pattern.
set ignorecase                         " Case-insensitive searching unless \C is in the pattern...
set smartcase                          " ...or the pattern contains an upper-case letter.
set nowrapscan                         " Don't wrap search.
set gdefault                           " Always use the /g flag with :s; add /g to restore the default behaviour.
set textwidth=80                       " Wrap at at 80 characters.
set linebreak                          " Wrap at word.
set showbreak=↪                        " Display at the start of line for wrapped lines.
set breakindent                        " When wrapping show next line on the same indent level.
set breakindentopt=sbr                 " Display showbreak before indent.
set autoindent                         " Copy indent from current line when starting a new line.
set backup                             " Keep backup file when writing.
set backupext=.bak                     " Extension for backup files
set backupskip=/tmp/*                  " No backup for these files.
set listchars=tab:!·,trail:·           " String to use in 'list' mode.
set spelllang=en_gb                    " Default language for spell check.
silent! set spelloptions=camel         " Spellcheck CamelCase words separately.
set helplang=en                        " Always use English in help...
set langmenu=en                        " ...and UI.
set scrolloff=3                        " Minimum number of lines to keep above/below cursor.
set wildmenu                           " Better tab completion at the command-line.
set wildmode=longest,list,full         " Complete longest match, list other matches and select those with wildmenu.
set wildignore=*.o,*.pyc,*.png,*.jpg,*.gif   " Ignore these files in completion.
set wildignorecase                     " Case is ignored when completing file names and directories.
set completeopt=menuone,popuphidden,noselect   " Insert mode completion:
                                       " menuone: always show menu, even when there is 1 match.
                                       " popuphidden: show docs in popup window; will be shown in CompleteChanged autocmd below.
                                       " noselect: don't select an option when starting.
                                       " TODO: longest seems bugged? Sometimes removes text?
                                       " longest: only insert longest common text instead of full match.
set completepopup=highlight:Pmenu,border:off     " Options for preview popup in completion.
set previewheight=6                    " Height of preview window.
set pumheight=10                       " Don't make completion menu too high.
set infercase                          " Like smartcase for insert completion.
set tabpagemax=500                     " Max. number of tabs to be open with -p argument or :tab all "
set showcmd                            " Show partial command in the last line of the screen.
set formatoptions+=j                   " Remove comment character when joining lines with J.
set nojoinspaces                       " Don't add two spaces after interpunction when using J.
set shiftround                         " Round indent to multiple of shiftwidth when using < and >
set smarttab                           " Backspace at start of line remove shiftwidith worth of space.
set matchpairs+=<:>                    " Also match < & > with %.
set switchbuf=useopen,usetab,newtab    " Use open tab (if any) when trying to jump to a quickfix error.
set noexpandtab                        " Real men use real tabs...
set tabstop=4                          " ...which are always 4 spaces wide.
set shiftwidth=0                       " Use tabstop.
set softtabstop=-1                     " Use shiftwidth.
set synmaxcol=500                      " Maximum column in which to search for syntax items.
set t_ti= t_te=                        " Prevent clearing the terminal on exit.
set mouse=                             " I don't want no stinkin' mouse (off by default in Vim, but enabled in Neovim).
set nrformats=bin,hex                  " Don't increment octal numbers.
set paragraphs=                        " Don't include nroff stuff.
set tildeop                            " Use ~ as an operator to switch case.
set clipboard=                         " Never automatically interface with system clipboard.
set nofoldenable                       " Disable folds by default.
set laststatus=2                       " Always show statusline...
set title                              " Update term title...
set titleold=                          " ...but restore old title after exiting.
set shortmess-=S                       " Show match count on n.
let &ttyfast = $SSH_CLIENT is# ''      " Assume the terminal is fast for smoother redrawing.
set display=lastline,uhex              " lastline  Show as much of the last line as possible instead of @.
                                       " uhex      Always show unprintable chars as <xx> instead of ^C.
set updatecount=50                     " Write to swap file every 50 characters; swap file is also written if nothing
                                       " happens for 4 seconds (as set by the 'updatetime' setting).
set diffopt=internal,filler,closeoff,indent-heuristic,algorithm:histogram
                                       " filler            Show filler lines.
                                       " internal          Use internal library.
                                       " closeoff          Run :diffoff when closing the other split.
                                       " indent-heuristic  Better detection of whitespace diffs.
                                       " algorithm         Better algorithm
set formatoptions+=ncroql              " n   Recognize numbered lists when formatting (see formatlistpat)
                                       " c   Wrap comments with textwidth
                                       " r   Insert comment char after enter
                                       " o   Insert comment char after o/O
                                       " q   Format comments with gq
                                       " l   Do not break lines when they were longer than 'textwidth' to start with
set statusline=
let &statusline .= '%<%f'              " Filename, truncate right
let &statusline .= ' %h%m%r'           " [Help] [modified] [read-only]
let &statusline .= '%{len(getqflist()) > 0 ? "[QE]" : ""}'
let &statusline .= '%{len(getloclist(0)) > 0 ? "[LE]" : ""}'

" TODO: alternative: map key to show function signature history in popup? Cycle
" back and forth through it.
"let &statusline .= ' %#X#%{get(v:completed_item, "menu", "")}%#StatusLine#'
let &statusline .= ' %#Y#%{get(get(b:, "lsc_last_preview", []), 0, "")}%#StatusLine#'

let &statusline .= '%='                " Right-align from here on.
let &statusline .= ' [line %l of %L]'  " current line, total lines.
let &statusline .= ' [col %v]'         " column.
let &statusline .= ' [0x%B]'           " Byte value under cursor.

hi X guibg=#999999 guifg=white
hi Y guibg=#cccccc guifg=black

" Set/create directory to keep backup, swap, undo files.
set backupdir=$HOME/.cache/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$HOME/.cache/vim/swap   | call mkdir(&directory, 'p', 0700)
set viewdir=$HOME/.cache/vim/view     | call mkdir(&viewdir, 'p', 0700)
set undodir=$HOME/.cache/vim/undo     | call mkdir(&undodir, 'p', 0700)
if &viminfofile isnot# 'NONE' |
    set viminfofile=$HOME/.cache/vim/viminfo
endif


""" Autocmds
""""""""""""
augroup my-autocmds
    au!

    " Go to the last cursor location when a file is opened, unless this is a git
    " commit (in which case it's annoying).
    au BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") && &filetype != 'gitcommit'
            \| exe 'normal! g`"'
        \| endif

    " Hub
    au BufNewFile,BufRead ISSUE_EDITMSG set ft=

    " Don't spellcheck urls.
    au BufReadPost * syn match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell

    " Reset some settings that these ftplugins or syntax files reset :-/
    au FileType python setl ts=4
    au FileType sass   setl noexpandtab sw=4

    " Remove Python 2 keywords.
    au Syntax python
        \ syn keyword pythonTwoBuiltin basestring cmp execfile file long unichr
        \     raw_input reduce reload unicode xrange apply buffer coerce intern

    " 2 spaces is almost universal.
    au FileType yaml setl expandtab ts=2

    " C files are almost always ts=8, and very often mix tabs and spaces.
    au FileType c,cpp setl ts=8

    " Set tabstop for Makefile, config files, etc.
    au BufNewFile,BufRead [Mm]akefile*,crontab*,*.conf,*.ini,*.cfg,*.rc setl ts=8

    " Set larger textwidth for HTML.
    au FileType html,htmldjango,eruby,haml setl textwidth=100

    " Spaces work better, and don't round indenting by shiftwidth (mucks up
    " marking stuff as code).
    au FileType markdown setl expandtab noshiftround

    " Italics don't work well in tmux; shows black background. Loads of people
    " with the issue, but can't get it to work, so just disable it :-(
    au FileType markdown,html,gohtml,htmldjango,xhtml
        \  if $TMUX isnot '' | hi htmlItalic cterm=underline | endif

    " Don't need errors; too many false positives.
    au FileType markdown hi markdownError ctermbg=NONE

    " These emails are usually DOS formatted (as should be, per RFC).
    au BufNewFile  *.eml setl fileformats+=dos fileformat=dos
    au BufReadPost *.eml setl fileformats+=dos fileformat=dos | edit!

    " Works better most of the time.
    "au FileType json,xml setl nowrap

    " Show formatting characters only in insert mode and load vimhelplint.
    "au FileType help
    "    \| if &modifiable
    "    \|   setl colorcolumn=78
    "    \|   silent! packadd! vim-vimhelplint
    "    \|   augroup help_insert
    "    \|     au InsertEnter <buffer> setl conceallevel=0 | highlight clear Ignore
    "    \|     au InsertLeave <buffer> setl conceallevel=2
    "    \|   augroup end
    "    \| endif

    " Very common in CSS; not sure why this isn't there by default? Hmm.
    au FileType css setl isk+=-

    " Open in tab, rather than split.
    au FileType vim setl keywordprg=:tab\ help

    " Varnish
    autocmd BufRead,BufNewFile *.vcl setfiletype vcl.conf

    " Get MDN help for current element; works for CSS and HTML.
    " TODO: check out:
    "   https://github.com/stephenmckinney/vim-dochub
    "   https://github.com/romainl/vim-devdocs
    au FileType css,html,gohtml,htmldjango,xhtml
        \  setl keywordprg=:MDN
        \| command! -nargs=1 MDN call system(printf(
        \          'firefox https://developer.mozilla.org/en-US/docs/Web/%s/%s',
        \          (&ft is# 'css' ? 'CSS' : 'HTML/Element'), <f-args>))

	au FileType html
				\  let g:html_indent_script1 = 'inc'
				\| let g:html_indent_style1  = 'inc'
				\| let g:html_indent_inctags = "html,body,head,tbody"
				\| let g:html_indent_autotags = "th,td,tr,tfoot,thead"
augroup end


""" Commands
""""""""""""

" Convert buffer to and from scratch.
command S
    \  if &buftype is# 'nofile' | setl swapfile buftype= bufhidden=
    \| else                     | setl noswapfile buftype=nofile bufhidden=hide | endif
    \| echo printf('swapfile=%s buftype=%s bufhidden=%s', &swapfile, &buftype, &bufhidden)

" Get the syntax name of character under the cursor.
command! -bang SyntaxName echo <bang>0
    \ ? map(synstack(line('.'), col('.')), {_, id -> synIDattr(id, 'name')})
    \ : synIDattr(synID(line('.'), col('.'), 1), 'name')

" Clean trailing whitespace.
fun! s:trim_whitespace()
    let l:save = winsaveview()
    keeppattern %s/\s\+$//e
    call winrestview(l:save)
endfun
command! TrimWhitespace call s:trim_whitespace()

" Call uni on current character or visual selection.
command! -range UnicodeName
        \  let s:save = @a
        \| if <count> is# -1 | let @a = strcharpart(strpart(getline('.'), col('.') - 1), 0, 1)
        \| else              | exe 'normal! gv"ay' | endif
        \| echo system('uni -q i', @a)[:-2]
        \| let @a = s:save | unlet s:save

" It's not uncommon I want to insert some text at the start and end of lines;
" this makes that a bit easier.
"
"   :Modline /start/ /end/
"   :Modline !/path/! //
"   :Modline // /end only/
fun! s:modline(line1, line2, args)
    exe printf('%s,%ss%s^%s', a:line1, a:line2, a:args[0][0], a:args[0])
    exe printf('%s,%ss%s$%s', a:line1, a:line2, a:args[1][0], a:args[1])
endfun
command! -range -nargs=+ Modline call s:modline(<line1>, <line2>, [<f-args>])

" Stay on top of things!
" TODO: maybe also hook in to cursormoved?
fun! s:keeptop()
	if execute('nmap <buffer> j') =~# 'jzt$' 
		nunmap <buffer> j
		nunmap <buffer> <Down>
		nunmap <buffer> n
		nunmap <buffer> N
		echo 'Unmapped'
	else
		nnoremap <buffer> j jzt
		nnoremap <buffer> n nzt
		nnoremap <buffer> N Nzt
		nnoremap <buffer> <Down> jzt
		normal! zt
		echo 'Keeping on top of things!'
	endif
endfun
command! KeepTop call s:keeptop()

" :reg but without so many tabs.
command! Reg echo substitute(execute(':reg'), '\(<09>\|\^J\(\n\)\)', '\2', 'g')

" Sum up all numbers in a visual selection.
"
" This removes all non-numbers, so that it works when summing:
"
"  Personal plans        € 44
"  Personal plus plans   € 20
"  Stripe costs         -€ 14
"
" It will just add 44, 20, and -14 (resulting in 50).
fun! s:sum(count)
    if a:count is# -1
        echohl Error | echom 'Sum: need selection' | echohl None
        return
    endif

    let l:save = @a
    silent normal! gv"ay
    let l:lines = @a
    let @a = l:save

    let l:total = 0
    for l:line in split(substitute(l:lines, '[^0-9.\n-]', '', 'g'), "\n")
        let l:total += l:line->str2float()
    endfor
    echom printf('Total: %f', l:total)
endfun
command! -range Sum call s:sum(<count>)


""" Key mappings
""""""""""""""""

" Reload config.
nnoremap <Leader>r :source $MYVIMRC<CR>

" Some useful-ish toggles.
nnoremap <F9>  :set shiftround!<CR>:set shiftround?<CR>
nnoremap <F10> :set list!<CR>:set list?<CR>
inoremap <F10> <C-o>:set list!<CR>
nnoremap <F11> :set cursorcolumn!<CR>:set cursorcolumn?<CR>
inoremap <F11> <C-o>:set cursorcolumn!<CR>
nnoremap <F12> :set cursorline!<CR>:set cursorline?<CR>
inoremap <F12> <C-o>:set cursorline!<CR>

nnoremap <Leader>v :let &virtualedit={'all': '', '': 'all'}[&ve]<CR>:set ve?<CR>

" Enable spell check, switch languages
nnoremap <F8>      :set spell!<CR>:set spell?<CR>
inoremap <F8>      <C-o>:set spell!<CR>
nnoremap <Leader>ss :set spell!<CR>:set spell?<CR>
nnoremap <Leader>sn :set spelllang=nl<CR>
nnoremap <Leader>se :set spelllang=en_gb<CR>

" Use <C-l> to clear some highlighting, and make sure it works from insert mode.
nnoremap <silent> <C-l> :nohlsearch<CR>:setl nolist nospell<CR>:diffupdate<CR>:syntax sync fromstart<CR><C-l>
inoremap <C-l> <C-o>:exe "normal \<C-l>"<CR>

" Open directory in new tab
nnoremap <Leader>d :tabe %:h<CR>

" We don't need no stinkin' ex mode; use it for formatting.
noremap Q gq

" Bloody annoying.
nnoremap q: :q

" Interface with system clipboard.
noremap <Leader>y "*y
noremap <Leader>p "*p
noremap <Leader>Y "+y
noremap <Leader>P "+p

" Indent in visual and select mode automatically re-selects.
vnoremap > >gv
vnoremap < <gv

" Make n always search forward, even when started with ?
nnoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward]

" Don't move cursor on * and #
nnoremap <silent> * :let @/ = '\<' . expand('<cword>') .  '\>' \| :set hlsearch<CR>
nnoremap <silent> # :let @/ = '\<' . expand('<cword>') .  '\>' \| :set hlsearch<CR>

" Use visual movement rather than line movement.
nnoremap k gk
nnoremap j gj
nnoremap <Up>   gk
nnoremap <Down> gj
inoremap <expr> <Up>   pumvisible() ? "\<C-p>"  : "\<C-o>gk"
inoremap <expr> <Down> pumvisible() ? "\<C-n>"  : "\<C-o>gj"

" Scroll with space, like pager. More useful than moving one char.
nnoremap <Space> <C-d>

" gf and gF opens in a tab.
nnoremap gf <C-w>gf
vnoremap gf <C-w>gf
nnoremap gF <C-w>gF
vnoremap gF <C-w>gF

" Suspend also works from insert.
inoremap <C-z> <C-o><C-z>

" Doc on <C-q> in insert.
inoremap <C-q> <C-o>:normal! K<CR>

" Home works like 0 if already at start of a line, and ^ otherwise.
" Adapted from: http://vim.wikia.com/wiki/VimTip315
noremap <expr> <Home> col('.') is# match(getline('.'), '\S') + 1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>

" Use a reasonable completion.
fun! s:guessType()
    " TODO: Show original word somewhere.
    " TODO: Make completion start even if word is after badly spelled word.

    if &spell && spellbadword()[1] isnot# '' | return "\<C-x>s"
    elseif &completefunc isnot# ''           | return "\<C-x>\<C-u>"
    elseif &omnifunc isnot# ''               | return "\<C-x>\<C-o>"
    elseif exists('*completor#do')           | return "\<C-R>=completor#do('complete')\<CR>"
    elseif exists(':ALEComplete')            | "\<C-\>\<C-O>:ALEComplete\<CR>"
    elseif exists('*coc#refresh')            | "\<C-r>=coc#refresh()\<CR>"
    else                                     | return "\<C-x>\<C-n>"
    endif
endfun
inoremap <expr> <C-@> pumvisible() ? "\<C-n>"  : <SID>guessType()
nnoremap <expr> <C-@> pumvisible() ? "i\<C-n>" : 'i' . <SID>guessType()

" Yank without clobbering registers.
nnoremap dD "_dd

" Replace the current line with the unnamed register.
nnoremap RR "_ddP

" Shortcut to write and run :make.
nnoremap <silent> MM :silent! :wa<CR>:echo &makeprg<CR>:silent make<CR>:redraw!<CR>

" Shortcut to close all windows except the current one.
nnoremap <silent> OO :silent wincmd o<CR>

" I often mistype this :-/
cabbr Set set
cabbr Help help
cabbr tane tabe
cabbr ta tabe
iabbr teh the
iabbr hte the
iabbr Teh The
iabbr seperated separated
iabbr seperate separate
iabbr taht that

" Makes stuff a bit easier to type.
iabbr 1= !=
iabbr ;= :=
iabbr :+ :=
iabbr err1= err !=
iabbr err!= err !=

" Add/remove word delimiters in search pattern.
fun! s:wrap()
    let l = getcmdline()
    let pos = getcmdpos()
    " Remove
    if l[:1] is '\<' && l[-2:] is '\>'
        call setcmdpos(pos - 2)
        return l[2:len(l)-3]
    endif
    " Add
    if l[:1] isnot '\<'
        let l = '\<' . l
        let pos += 2
    endif
    if l[-2:] isnot '\>'
        let l .= '\>'
    endif
    call setcmdpos(pos)
    return l
endfun
cnoremap <expr> <C-a> index(['/', '?'], getcmdtype()) is -1 ? "\<F1>" : "\<C-\>e<SID>wrap()\<CR>"


" Reposition the preview popup to the bottom/top of the screen, spanning the
" entire width.
" TODO: adds quite a bit of delay/flickering.
augroup complete-popup
    au!
    au CompleteChanged * call s:complete_info()
augroup end
fun! s:complete_info()
    let text = get(v:event.completed_item, 'info', '')
    if text is# ''
        return
    endif
    let id = popup_findinfo()
    if !id
        return
    endif

    " Set function signature as popup title for Go.
    " TODO: use 'previewheight' as max height.
    " TODO: filter blank lines?
    let title = ''
    if &ft is# 'go'
        let s = text->split("\n")
        let title = s[0]
        if len(s) <= 2
            return
        elseif len(s) > 5
            let s = s[2:5]
            let s[3] .= ' […]'
        else
            let s = s[2:]
        endif
        call popup_settext(id, s)
    else
        call popup_settext(id, text)
    endif

    " Set better options.
    call setwinvar(id, '&showbreak', " ") " TODO: unset doesn't work?
    call setwinvar(id, '&linebreak', '1')

    hi PreviewBorder guibg=#ffa7ff

    " TODO: set to top if it would be over the current line and/or the pum.
    call popup_show(id)
    call popup_setoptions(id, #{
            \ title:       '─ ' .. title,
            \ pos:         'botleft',
            \ line:        &lines - 2,
            \ col:         1,
            \ maxwidth:    &columns - 2,
            \ minwidth:    &columns - 2,
            \ maxheight:   5,
            \ border:      [1, 0, 0, 0],
            \ borderchars: ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
            \ borderhighlight: ['PreviewBorder'],
    \ })
endfun


""" Plugins
"""""""""""

" Default plugins
"""""""""""""""""
"let g:loaded_2html_plugin = 1          " Disable some of the default plugins that I don't use.
let g:loaded_LogiPat = 1
let g:loaded_getscript = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_gzip = 1
let g:loaded_netrw = 1
let g:loaded_netrwFileHandlers = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_rrhelper = 1
let g:loaded_tarPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimball = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zipPlugin = 1
let g:did_install_default_menus = 1    " We don't use the menus (this is comparatively slow)


""" switchy.vim
"""""""""""""""
nnoremap <silent> <Leader>a :call switchy#switch('tabedit', 'sbuf')<CR>


""" lazy.vim
""""""""""""
fun! s:r(file) abort
	let f = $HOME .. '/.vim/snip/' .. a:file
	if filereadable(f) | return readfile(f) | endif
	return ''
endfun
let g:lazy_snippets = #{
	\ go: #{
		\ err:  "if err != nil {\n\treturn fmt.Errorf(\"\b: %w\", err)\n}",
		\ errt: "if err != nil {\n\tt.Fatal(err)\n}",
		\ tt:   s:r('/test.go'),
		\ dp:   "fmt.Println(zdb.ApplyPlaceholders(\bquery, args...))",
		\ dd:   "zdb.Dump(ctx, os.Stdout, \"\b\")",
        \ bb:   "func Benchmark\b(b *testing.B){\n\tb.ReportAllocs()\n\tfor n := 0; n < b.N; n++ {\n\t}\n}\n"
	\ },
	\ html: #{
		\ doc: s:r('/base.html'),
	\ },
\ }

""" vim-dirvish
"""""""""""""""
let g:dirvish_relative_paths = 1       " Make paths in the Dirvish buffer relative to getcwd().

augroup my-dirvish
    au!
    au Filetype dirvish
                "\ Remap as I often use q to close the Vim pager.
                \  silent! nunmap <buffer> q
                \| nmap <buffer> Q <Plug>(dirvish_quit)
                "\ Add tab mappings
                \| nnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>
                \| xnoremap <buffer> t :call dirvish#open('tabedit', 0)<CR>
                "\ Launch shell in cwd
                \| nnoremap <buffer> <C-t> :lcd %<CR>:silent exec '!' . (has('gui_running') ? 'st -e ' : '') . $SHELL<CR>:lcd<CR><C-l>
augroup end


""" gopher.vim
""""""""""""""
let g:gopher_debug = ['commands', 'setup']
let g:gopher_highlight = ['string-spell', 'string-fmt',
        \ 'fold-block', 'fold-comment', 'fold-import', 'fold-pkg-comment', 'fold-varconst']
let g:gopher_highlight = ['string-spell', 'string-fmt']
"let g:gopher_highlight = ['string-spell', 'string-fmt', 'fold-block', 'fold-import', 'fold-pkg-comment', 'fold-varconst']

" let g:gopher_map = {'_nmap_prefix': '<Leader>', '_imap_prefix': '<C-g>' }

augroup my-gopher
    au!

    " Make, lint, and test code.
    "au FileType go nmap MM <Plug>(gopher-install)
    "au FileType go nmap TT <Plug>(gopher-test)

    " Make ! stand out a bit more.
    au FileType go syn match goBang /!\ze[^=]/ | hi goBang gui=bold cterm=bold

    " Compile without cgo unless explicitly enabled.
    autocmd FileType go if $CGO_ENABLED is# '' | let $CGO_ENABLED=0 | endif

    " Format buffer on write.
    " https://vi.stackexchange.com/questions/7116
    au BufWritePre *.go
                \  let s:save = winsaveview()
                \| silent! exe 'undojoin | keepjumps %!goimports 2>/dev/null || cat /dev/stdin'
                \| call winrestview(s:save)

    "            \| let g:gopher_install_package = 'zgo.at/goatcounter/cmd/goatcounter'
    "autocmd BufReadPre /home/martin/code/goatletter/*.go
    "            \ let g:gopher_install_package = 'zgo.at/goatletter/cmd/goatletter'
augroup end


""" vim-qf
""""""""""
let g:qf_auto_open_quickfix = 1        " Automatically open qfix and loclist.
let g:qf_auto_open_loclist = 1

" Go to next/prev error; need to use escape codes as <C-Arrow> isn't reliable.
nmap <C-Left>    <Plug>(qf_qf_previous)
nmap <Esc>[D >   <Plug>(qf_qf_previous)
nmap <Esc>[1;5D  <Plug>(qf_qf_previous)
nmap <C-Right>   <Plug>(qf_qf_next)
nmap <Esc>[C     <Plug>(qf_qf_next)
nmap <Esc>[1;5C  <Plug>(qf_qf_next)

" Toggle quickfix list.
nmap <C-Up>      <Plug>(qf_qf_toggle_stay)
nmap <Esc>[A     <Plug>(qf_qf_toggle_stay)
nmap <Esc>[1;5A  <Plug>(qf_qf_toggle_stay)


""" vim-lsc
"""""""""""
let g:lsc_server_commands = #{
    \ go:         #{command: 'gopls serve', log_level: -1, suppress_stderr: v:true},
\ }

    "\ c:          #{command: 'clangd -log=error'},
let g:lsc_enable_autocomplete = v:false      " Don't complete when typing.
let g:lsc_enable_diagnostics = v:false       " Don't lint code.
let g:lsc_reference_highlights = v:false     " Don't highlight references.
"let g:lsc_enable_incremental_sync = v:false  " Don't constantly send diffs to server.
"let g:lsc_preview_split_direction = 'below'  " Show preview at bottom, rather than top.
"let g:lsc_enable_incremental_sync = v:false

let g:lsc_auto_map = #{defaults: v:true, GoToDefinitionSplit: ''}
augroup my-lsc
    au!
    " Open in tab, rather than split.
    au BufNewFile,BufReadPost *
        \  if has_key(get(g:, 'lsc_servers_by_filetype', {}), &filetype) && lsc#server#filetypeActive(&filetype)
        \|   nnoremap <buffer> gd :tab LSClientGoToDefinitionSplit<CR>
        \| endif
augroup end

" Useful especially for repeating last :s command, since it won't reset the last
" search pattern.
" TODO: turns out :&& is the same?
let s:last_repeat = get(s:, 'last_repeat', '')
fun! s:repeat(bang, l1, l2, ...)
    if a:bang
        echo s:last_repeat
        return
    endif

    if a:0 > 0
        let s:last_repeat = join(a:000, ' ')
    endif
    let run = printf('%d,%d%s', a:l1, a:l2, s:last_repeat)
    exe run
endfun
command! -bang -range -nargs=* Repeat call s:repeat(<bang>0, <line1>, <line2>, <f-args>)
nnoremap <silent> <Leader>. :call <SID>repeat()<CR>

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
"inoremap <C-U> <C-G>u<C-U>

" Expandtab since some docs are aligned.
" vim: et

let s:chars = '' .
			\ ' ┌┬─┐ ┏┳━┓ ╔╦═╗ ' .
			\ ' ├┼─┤ ┣╋━┫ ╠╬═╣ ' .
			\ ' ││ │ ┃┃ ┃ ║║ ║ ' .
			\ ' └┴─┘ ┗┻━┛ ╚╩═╝ '

let s:keys = {
			\ '-': '',
    		\ '|': '',
    		\ '\': '',
    		\ '/': '',
    		\ 'l': '',
    		\ 'j': '',
    		\ '+': '',
    		\ 't': '',
    		\ 'y': '',
    		\ '}': '',
    		\ '{': '',
			\ }

fun! s:blocky()
    if get(b:, 'blocky', 0)
        " iunmap <buffer> {
        " let b:blocky = 0
    endif

    let b:blocky = 1
    " inoremap <buffer> { ┤
endfun

command! Blocky call s:blocky()
nnoremap <Leader>b :call <SID>blocky()<CR>

command! -nargs=1 Replace call append(4, printf('replace zgo.at/%s => ../%s', <f-args>, <f-args>))
